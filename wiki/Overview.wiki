#summary JGF Overview.

= JGF Overview =

===Introduction===

Since you are reading this we assume you are interested in writing Games or Interactive Applications. Good :-).

There are several systems that almost every game uses nowadays. For example, every game saves and keeps the user settings (controls, speakers volume...). Almost every game has some sort of menu too, and may of them provide a "console" mode for advanced users. Virtually all games have introduction screens, loading screens, and on screen displays.

And apart from all that, there's the actual game.

Using a framework provides you with a set of systems that work well together, and a structure for you to build your game logic and aspect. With JGF, you can then focus on your actual game development leaving the typical funcionality up to JGF. 

JGF is not a "game maker" or a "tool". It is not a game engine either. JGF is a game development framework for in Java... you will be programming your game in Java and, for the time being, you will be using the only supported 3D engine "jMonkeyEngine".

Maybe you want to take some time to check [Features JGF Features] before moving on...

===JGF Configuration===

So how does a JGF game look like?

JGF applications are initializated using a configuration file. JGF reads this file and initializes a number of services for you. This file reflects how our game is composed.

When you want to add functionality to the game, you add components to the configuration file. For example, if we want to add a screenshot feature to your game, you would add the following component (note the name of the _class_ and the parameters _key_ and _path_):

{{{
<view id="view/root/level/screenshot" class="net.jgf.jme.view.ScreenshotView" 
    autoLoad="true" autoActivate="true" >
  <key>KEY_F12</key>
  <path>$APP_HOME/screenshots/screenshot-$ID.png</path>
</view>
}}}

In the practice, you just need to copy and paste the component you need from examples and modify the parameters to suit your game.

Using this approach has a few advantages: you can easily add or remove components and states to your game during development. You can also substitute some components with testing versions of them.

===How the game is built===

Mainly three types of components are needed to build a game:

  * *Entities*: represent each object, item or character that interacts with the game.
  * *!LogicStates*: Define the different logic blocks and behaviours of your game.
  * *!ViewStates*: Define the different views and input that you will use. For example, you'll have !ViewStates for the menus, the introduction screens, the main game, the hud...

Services and its parts are defined in the configuration file, and work together to form your game. You can see the configuration file as a tree of services that contain different components:

http://jgf.googlecode.com/svn/trunk/jgf/doc/screenshots/mudvolley-configtree.png

_Structure of the JGF configuration file (showing some different services and components)_

===Benefits of using a framework===

Often you'll need functionality (like menus or an introduction screen) ready to use quickly without worrying too much about the details. 

Using reusable components for most of these tasks allows you to quickly develop prototypes and easily promote them to production code. 

For example, if you need to add an introduction screen to your game, you just need to add a new View and make sure it runs sequentially before your other Views:

{{{
<view id="view/root/intro/logo" class="net.jgf.jme.view.display.DisplayItemsView" 
	autoLoad="true" autoActivate="true">
	
	<item id="view/root/intro/logo/tanks" class="net.jgf.jme.view.display.ImageItem">
		<center>0.0 0.2 0.0</center>
		<textureUrl>tanks/texture/logo/tanks-logo.png</textureUrl>
		<size>0.75</size>
	</item>
	
	<item id="view/root/intro/logo/title" class="net.jgf.jme.view.display.TextItem">
		<center>-0.00 -0.3 0.0</center>
		<size>0.25</size>
		<font>Verdana BOLD 40</font>
		<text>T a n k s</text>
	</item>	
	
</view>
}}}

If you later decide that you want to replace the whole introduction screen with a video or something completely different, you just need to replace that view with another framework or custom view.

===System overview===

http://jgf.googlecode.com/svn/trunk/jgf/doc/design/diagrams/game-components.png


[http://code.google.com/p/jgf JGF Home] - [Features] - [Overview] - [GettingStarted Getting Started] - [http://code.google.com/p/jgf/source/browse/#svn/trunk/jgf Browse the Source]