#summary JGF (Java Game Engine) Features.
#labels Featured

= JGF Features =

_Please note that some of the features listed are still to be built. A number of them have currently only basic support. If you are interested please collaborate with the project submitting your comments, usage feedback or patches._

Spend some time getting familiar with JGF features. Knowing them will allow you to save time or to add a quick feature to your application.

*Services and Configuration System*

JGF main configuration is done in a descriptive XML configuration file, which provides:

  * Easy overview of your application parts and components.
  * A standard and practical way to configure components.
  * Easy way to add or replace components of your game.
  * A convenient environment for testing.
  
*Console System*

  * Extensible and replaceable console system. Functionality, aspect and language can be customized.
  * A Beanshell console is provided.
  * Basic graphical interface.
  * Default console beans for Game Settings management _(TO BE DONE)_.

  http://jgf.googlecode.com/svn/trunk/jgf/doc/screenshots/sample-console-1.png

*Settings System* _(TO BE REVIEWED AND REFACTORED)_

  * Settings Service holds game settings.
  * Settings Storage Service provides saving and loading functionality for settings.

  * Configuration Dialog for initial settings _(TO BE DONE)_.
  * Command Line Options parsing service, which allows to set settings and other framework parameters based on the command line arguments passed to the application _(TO BE REFACTORED)_.

*Menu System*

  http://jgf.googlecode.com/svn/trunk/jgf/doc/screenshots/sample-menu-1.png

*Logic and Graphics states*

  * State Trees are used to manage Logic and Views.
  * Game flow is controlled by the activation of those states.
  * There are services for Entities, Players and other data management.

  http://jgf.googlecode.com/svn/trunk/jgf/doc/screenshots/sample-displayitems-1.png

  http://jgf.googlecode.com/svn/trunk/jgf/doc/screenshots/sample-displayitems-2.png

*Extensibility*

JGF is designed to be extensible. Base classes are provided for most of the components you'll need to implement to code your game. And you can always provide new functionality writing your custom components if you need.

  * JGF includes and provides components that easily allow you to add development aids to your game:
    * JME Scene Debugger (Bounding Bounds viewing, Normals viewing
    * Physics Debugger
    * Nymon's Scene Monitor
    * Scene graph information and statistics _(TO BE DONE)_
    * Framework components information utils _(TO BE DONE)_
    * JVM information logger

  http://jgf.googlecode.com/svn/trunk/jgf/doc/screenshots/sample-debug-1.png

  http://jgf.googlecode.com/svn/trunk/jgf/doc/screenshots/sample-scenemonitor-1.png

*Loaders and Art Pipeline*

  * JGF includes a modular loading system for Entities, Scenes and Models. 
  * Pool systems are provided. _TO BE REFACTORED_.
  * Easily insert and combine assets, effects, entities, logic and views.
  * Standard way to convert and cache converted resources. _TO BE REVIEWED_.

*Audio*

  * A convenient, easy to use "sound effects machine" component is provided.

*Networking*

  _Networking is unfortunately one of the key features that is missing. This area needs to be reviewed. At least some work has already been done that prepare JGF to be a network-enabled game framework._

*Application architecture*

  * Standard service and state lifecycles.
  * Standard functional units (LogicStates, ViewStates and Entities), which make the application easier to understand and develop.
  * Controlled resource loading and unloading.

  * JGF is oriented towards a Client / Server architecture (even if your game is not networked). _TO BE REVIEWED_. _TO BE DONE_.

*Logging*

 * JGF defines a logging utility (log4j). JGF also provides means to configure and manage logging, and default settings for logging.  
 * Statistics and information about the JVM (memory, GC, etc...).  
 * Clean and informed startup and shutdown procedures.

*Build System*

  * Ant scripts provided to package your application, convert it to exe, create installers, create javadocs... _TO BE DONE_.


[http://code.google.com/p/jgf JGF Home] - [Features] - [Overview] - [GettingStarted Getting Started] - [http://code.google.com/p/jgf/source/browse/#svn/trunk/jgf Browse the Source] - [FAQ]