<?xml version="1.0" encoding="ISO-8859-1" ?>

<!--
	Java Game Framework Global Configuration File
	$Id$
--> 	

<!-- 
	This is an example configuration file for JGF - Java Game Framework.
	
	This file corresponds to a version of the example game MudVolley. One of the examples 
	included in JGF MudVolley tutorials. Through these tutorials, you will be building a 
	game.
	
	Make sure you run the corresponding MudVolley Game Example before reading the file,
	so you have a "feeling" of what the aim of this example file is.
	
	If you haven't built the project or ran any of the examples, you are strongly
	encouraged to do so. Check the documentation page online for instructions
	on how to setup JGF for game development.
-->

<!-- 
	This is MudVolley Tutorial Example #1.
	
	In this example, a simple scene is set up and two players will be created. Game
	logic is very simple and just keeps the ball bouncing. There are no rules for
	scoring yet. 
	
	Note that the scene is set up using a custom loader. In many cases, you will use
	use one of JGF out of the box loaders.
-->

<jgf>

	<!-- Application configuration: every application needs to define this element.
	     This is the information used by the framework to display as game title,
	     messages... -->
	<application>
	
		<!-- General application information -->
		<name>MudVolley JGF Example 1: Introducing JGF</name>
		<company>JGF</company>
		<version>1.0</version>
		<networkProtocolVersion>1.0</networkProtocolVersion>
		

		<!-- In debug mode more verbose logging is produced, and some extra checks
			 are performed during runtime. This is a boolean parameter (true|false). -->
		<debug>true</debug>
		
		<!-- Application description: to be used by short listings and command line help -->
		<description>
			MudVolley is a Slime Volley clone that shows some of
			Java Game Framework (JGF) features.
		</description>
		
		<!-- A reference to the engine service being used. Currently, only JMonkeyEngine is
		supported. This service is defined below -->
		<engine ref="engine" />
		
	</application>
	
	<!-- Engine service. Currently, the only supported game engine is JMonkeyEngine. 
		 This service is implemented by the net.jgf.jme.engine.JMEEngine class.
		 You need to provide some parameters too. -->
	<service id="engine" class="net.jgf.jme.engine.JMEEngine">

		<!-- 'collectStats' parameter causes JMEEngine to collect engine statistics
		like FPSs, objects drawn, number of textures... In this example,
		we use variable interpolation to apply the same value for 'debug', defined above.  -->
		<collectStats>${application/debug}</collectStats>
		
		<!--  Reference to the LogicManager service, defined below -->
		<logicManager ref="logic" />
		
		<!--  Reference to the ViewManager service, defined below -->
		<viewManager ref="view" />
		
	</service>

	
	<!-- The SceneManager service holds a reference to scenes. The  -->
	<service id="scene/manager" class="net.jgf.scene.SimpleSceneManager" depends="engine">
			
			<!--  -->
			<scene id="scene" class="net.jgf.jme.scene.DefaultJmeScene">
			
				<cameras>
					<camera id="scene/cameras/overview" class="net.jgf.jme.camera.StaticCamera" >
						<target>0.0 4.0 0.0</target>
						<location>0.0 4.0 24.0</location>
					</camera>
				</cameras>

				<camera ref="scene/cameras/overview" />
			
			</scene>
			
			
	</service>
	
	<!--
		Loading
	 -->
	<service id="loader" class="net.jgf.loader.DefaultLoaderManager">
				
		<loader id="loader/scene" class="net.jgf.example.mudvolley1.loader.MudVolleySceneLoader" depends="engine">
		
		</loader>
		
		<loader id="loader/entity" class="net.jgf.example.mudvolley1.loader.MudVolleyEntityLoader">
						
		</loader> 	
				
	</service>
		
	<!-- 
		Entity Manager
	 -->
	<service id="entity" class="net.jgf.entity.DefaultEntityManager">
		
		<entity id="entity/root" class="net.jgf.entity.EntityGroup" >
				
		</entity>
			
	</service> 
	
	<!-- 
		Logic Manager
	 -->
	<service id="logic" class="net.jgf.logic.DefaultLogicManager">
	
		<logic id="logic/root" class="net.jgf.logic.ExclusiveLogicNode">
			
			<logic id="logic/root/newgame" class="net.jgf.example.mudvolley1.logic.NewGameLogic" 
				autoLoad="true" autoActivate="true" >
			</logic>
			
			<logic id="logic/root/ingame" class="net.jgf.logic.LogicStateNode">
			
				<logic id="logic/root/ingame/ingame" class="net.jgf.example.mudvolley1.logic.InGameLogic" 
					autoLoad="true" autoActivate="true" >
				</logic>
			
			</logic>
			
		</logic>
		
	</service>
		
	<!-- 
		View Manager
	 -->
	<service id="view" class="net.jgf.view.DefaultViewManager" depends="engine">

		<view id="view/root" class="net.jgf.view.ViewStateNode">
			
			<view id="view/root/level" class="net.jgf.view.ViewStateNode">
				
				<view id="view/root/level/input" class="net.jgf.example.mudvolley1.view.InputView"
					autoLoad="true" autoActivate="true" >
				</view>

				<view id="view/root/level/scene" class="net.jgf.jme.view.SceneRenderView"
					autoLoad="true" autoActivate="true" >
					<sceneManager ref="scene/manager" />		
				</view>
				
				<view id="view/root/level/skybox" class="net.jgf.jme.view.SkyboxRenderView"
					autoLoad="true" autoActivate="true" >
					<sceneManager ref="scene/manager" />	
				</view>
				
			</view>
							
		</view>
			
	</service>
	
</jgf><!-- Application configuration -->
 


